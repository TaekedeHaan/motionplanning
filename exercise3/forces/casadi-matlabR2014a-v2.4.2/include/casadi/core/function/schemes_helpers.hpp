/*
 *    This file is part of CasADi.
 *
 *    CasADi -- A symbolic framework for dynamic optimization.
 *    Copyright (C) 2010-2014 Joel Andersson, Joris Gillis, Moritz Diehl,
 *                            K.U. Leuven. All rights reserved.
 *    Copyright (C) 2011-2014 Greg Horn
 *
 *    CasADi is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *
 *    CasADi is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with CasADi; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

/** All edits to this file will be lost - autogenerated by misc/autogencode.py */
#ifndef SCHEMES_HELPERS_HPP
#define SCHEMES_HELPERS_HPP
#include <vector>
#include <string>
#include <utility>
#include <map>
namespace casadi {

/// Input arguments of a \e cle solver
///
/// \copydoc scheme_CLEInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > cleIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  std::string s[] = {"a", "v"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+2);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'cleIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of a \e cle solver
///
/// \copydoc scheme_CLEOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > cleOut(
    const std::string &n0 ="", const M &x0 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  std::string s[] = {"p"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+1);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'cleOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an ODE/DAE function
///
/// \copydoc scheme_ControlledDAEInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > controldaeIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M(),
    const std::string &n7 ="", const M &x7 =M(),
    const std::string &n8 ="", const M &x8 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  if (!n7.empty()) m[n7]=x7;
  if (!n8.empty()) m[n8]=x8;
  std::string s[] = {"t", "x", "z", "p", "u", "u_interp", "x_major", "t0", "tf"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+9);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'controldaeIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a control simulator
///
/// \copydoc scheme_ControlSimulatorInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > controlsimulatorIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  std::string s[] = {"x0", "p", "u"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+3);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'controlsimulatorIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a \e dle solver
///
/// \copydoc scheme_DLEInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > dleIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  std::string s[] = {"a", "v"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+2);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'dleIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of a \e dle solver
///
/// \copydoc scheme_DLEOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > dleOut(
    const std::string &n0 ="", const M &x0 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  std::string s[] = {"p"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+1);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'dleOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a \e dple solver
///
/// \copydoc scheme_DPLEInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > dpleIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  std::string s[] = {"a", "v"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+2);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'dpleIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of a \e dple solver
///
/// \copydoc scheme_DPLEOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > dpleOut(
    const std::string &n0 ="", const M &x0 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  std::string s[] = {"p"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+1);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'dpleOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an Homotopy NLP function
///
/// \copydoc scheme_HNLPInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > hnlpIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  std::string s[] = {"x", "p", "tau"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+3);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'hnlpIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an ODE/DAE function
///
/// \copydoc scheme_DAEInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > daeIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  std::string s[] = {"x", "z", "p", "t"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+4);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'daeIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an DAE function
///
/// \copydoc scheme_DAEOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > daeOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  std::string s[] = {"ode", "alg", "quad"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+3);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'daeOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an ODE/DAE backward integration function
///
/// \copydoc scheme_RDAEInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > rdaeIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  std::string s[] = {"rx", "rz", "rp", "x", "z", "p", "t"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+7);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'rdaeIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an ODE/DAE backward integration function
///
/// \copydoc scheme_RDAEOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > rdaeOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  std::string s[] = {"ode", "alg", "quad"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+3);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'rdaeOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an integrator
///
/// \copydoc scheme_IntegratorInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > integratorIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  std::string s[] = {"x0", "p", "z0", "rx0", "rp", "rz0"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+6);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'integratorIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an integrator
///
/// \copydoc scheme_IntegratorOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > integratorOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  std::string s[] = {"xf", "qf", "zf", "rxf", "rqf", "rzf"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+6);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'integratorOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a linear solver
///
/// \copydoc scheme_LinsolInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > linsolIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  std::string s[] = {"A", "B"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+2);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'linsolIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of a linear solver
///
/// \copydoc scheme_LinsolOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > linsolOut(
    const std::string &n0 ="", const M &x0 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  std::string s[] = {"X"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+1);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'linsolOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a LP problem
///
/// \copydoc scheme_LpSolverInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > lpIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  std::string s[] = {"c", "a", "lba", "uba", "lbx", "ubx"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+6);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'lpIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an LP Solver
///
/// \copydoc scheme_LpSolverOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > lpOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  std::string s[] = {"x", "cost", "lam_a", "lam_x"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+4);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'lpOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a \e dle solver
///
/// \copydoc scheme_LR_DLEInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > lrdleIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  std::string s[] = {"a", "v", "c", "h"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+4);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'lrdleIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of a \e dle solver
///
/// \copydoc scheme_LR_DLEOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > lrdleOut(
    const std::string &n0 ="", const M &x0 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  std::string s[] = {"y"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+1);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'lrdleOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a \e dple solver
///
/// \copydoc scheme_LR_DPLEInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > lrdpleIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  std::string s[] = {"a", "v", "c", "h"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+4);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'lrdpleIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of a \e dple solver
///
/// \copydoc scheme_LR_DPLEOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > lrdpleOut(
    const std::string &n0 ="", const M &x0 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  std::string s[] = {"y"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+1);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'lrdpleOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an NLP function
///
/// \copydoc scheme_NLPInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > nlpIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  std::string s[] = {"x", "p"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+2);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'nlpIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an NLP function
///
/// \copydoc scheme_NLPOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > nlpOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  std::string s[] = {"f", "g"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+2);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'nlpOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an NLP objective gradient function
///
/// \copydoc scheme_GradFInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > gradFIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  std::string s[] = {"x", "p"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+2);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'gradFIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an NLP objective gradient function
///
/// \copydoc scheme_GradFOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > gradFOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  std::string s[] = {"grad", "f", "g"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+3);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'gradFOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an NLP Jacobian function
///
/// \copydoc scheme_JacGInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > jacGIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  std::string s[] = {"x", "p"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+2);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'jacGIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an NLP Jacobian function
///
/// \copydoc scheme_JacGOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > jacGOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  std::string s[] = {"jac", "f", "g"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+3);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'jacGOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an NLP Hessian function
///
/// \copydoc scheme_HessLagInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > hessLagIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  std::string s[] = {"x", "p", "lam_f", "lam_g"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+4);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'hessLagIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an NLP Hessian function
///
/// \copydoc scheme_HessLagOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > hessLagOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  std::string s[] = {"hess", "f", "g", "grad_x", "grad_p"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+5);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'hessLagOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of an NLP Solver
///
/// \copydoc scheme_NlpSolverInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > nlpSolverIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M(),
    const std::string &n7 ="", const M &x7 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  if (!n7.empty()) m[n7]=x7;
  std::string s[] = {"x0", "p", "lbx", "ubx", "lbg", "ubg", "lam_x0", "lam_g0"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+8);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'nlpSolverIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an NLP Solver
///
/// \copydoc scheme_NlpSolverOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > nlpSolverOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  std::string s[] = {"x", "f", "g", "lam_x", "lam_g", "lam_p"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+6);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'nlpSolverOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a QP problem
///
/// \copydoc scheme_QcqpSolverInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > qcqpIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M(),
    const std::string &n7 ="", const M &x7 =M(),
    const std::string &n8 ="", const M &x8 =M(),
    const std::string &n9 ="", const M &x9 =M(),
    const std::string &n10 ="", const M &x10 =M(),
    const std::string &n11 ="", const M &x11 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  if (!n7.empty()) m[n7]=x7;
  if (!n8.empty()) m[n8]=x8;
  if (!n9.empty()) m[n9]=x9;
  if (!n10.empty()) m[n10]=x10;
  if (!n11.empty()) m[n11]=x11;
  std::string s[] = {"h", "g", "p", "q", "r", "a", "lba", "uba", "lbx", "ubx", "x0", "lam_x0"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+12);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'qcqpIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an QP Solver
///
/// \copydoc scheme_QcqpSolverOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > qcqpOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  std::string s[] = {"x", "cost", "lam_a", "lam_x"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+4);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'qcqpOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a QP problem
///
/// \copydoc scheme_QpSolverInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > qpIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M(),
    const std::string &n7 ="", const M &x7 =M(),
    const std::string &n8 ="", const M &x8 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  if (!n7.empty()) m[n7]=x7;
  if (!n8.empty()) m[n8]=x8;
  std::string s[] = {"h", "g", "a", "lba", "uba", "lbx", "ubx", "x0", "lam_x0"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+9);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'qpIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an QP Solver
///
/// \copydoc scheme_QpSolverOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > qpOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  std::string s[] = {"x", "cost", "lam_a", "lam_x"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+4);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'qpOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a SDP problem
///
/// \copydoc scheme_SDPInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > sdpIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M(),
    const std::string &n7 ="", const M &x7 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  if (!n7.empty()) m[n7]=x7;
  std::string s[] = {"f", "c", "g", "a", "lba", "uba", "lbx", "ubx"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+8);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'sdpIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an SDP Solver
///
/// \copydoc scheme_SDPOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > sdpOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  std::string s[] = {"x", "p", "dual", "cost", "dual_cost", "lam_a", "lam_x"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+7);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'sdpOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a SDQP problem
///
/// \copydoc scheme_SDQPInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > sdqpIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M(),
    const std::string &n7 ="", const M &x7 =M(),
    const std::string &n8 ="", const M &x8 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  if (!n7.empty()) m[n7]=x7;
  if (!n8.empty()) m[n8]=x8;
  std::string s[] = {"h", "c", "f", "g", "a", "lba", "uba", "lbx", "ubx"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+9);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'sdqpIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an SDQP Solver
///
/// \copydoc scheme_SDQPOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > sdqpOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  std::string s[] = {"x", "p", "dual", "cost", "dual_cost", "lam_a", "lam_x"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+7);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'sdqpOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a SOCP problem
///
/// \copydoc scheme_SOCPInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > socpIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M(),
    const std::string &n7 ="", const M &x7 =M(),
    const std::string &n8 ="", const M &x8 =M(),
    const std::string &n9 ="", const M &x9 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  if (!n7.empty()) m[n7]=x7;
  if (!n8.empty()) m[n8]=x8;
  if (!n9.empty()) m[n9]=x9;
  std::string s[] = {"g", "h", "e", "f", "c", "a", "lba", "uba", "lbx", "ubx"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+10);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'socpIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Output arguments of an SOCP Solver
///
/// \copydoc scheme_SOCPOutput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > socpOut(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  std::string s[] = {"x", "cost", "dual_cost", "lam_a", "lam_x", "lam_cone"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+6);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'socpOut' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Structure specification of an SOCP
///
/// \copydoc scheme_SOCPStruct
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > socpStruct(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  std::string s[] = {"g", "e", "a"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+3);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'socpStruct' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
/// Input arguments of a QP problem
///
/// \copydoc scheme_StabilizedQpSolverInput
template<class M>
std::pair<std::map<std::string, M>, std::vector<std::string> > stabilizedQpIn(
    const std::string &n0 ="", const M &x0 =M(),
    const std::string &n1 ="", const M &x1 =M(),
    const std::string &n2 ="", const M &x2 =M(),
    const std::string &n3 ="", const M &x3 =M(),
    const std::string &n4 ="", const M &x4 =M(),
    const std::string &n5 ="", const M &x5 =M(),
    const std::string &n6 ="", const M &x6 =M(),
    const std::string &n7 ="", const M &x7 =M(),
    const std::string &n8 ="", const M &x8 =M(),
    const std::string &n9 ="", const M &x9 =M(),
    const std::string &n10 ="", const M &x10 =M(),
    const std::string &n11 ="", const M &x11 =M()) {
  // This comment lets the haskell bindings know this is a scheme helper
  std::map<std::string, M> m;
  if (!n0.empty()) m[n0]=x0;
  if (!n1.empty()) m[n1]=x1;
  if (!n2.empty()) m[n2]=x2;
  if (!n3.empty()) m[n3]=x3;
  if (!n4.empty()) m[n4]=x4;
  if (!n5.empty()) m[n5]=x5;
  if (!n6.empty()) m[n6]=x6;
  if (!n7.empty()) m[n7]=x7;
  if (!n8.empty()) m[n8]=x8;
  if (!n9.empty()) m[n9]=x9;
  if (!n10.empty()) m[n10]=x10;
  if (!n11.empty()) m[n11]=x11;
  std::string s[] = {"h", "g", "a", "lba", "uba", "lbx", "ubx", "x0", "lam_x0", "muR", "muE", "mu"};
  std::vector<std::string> sv = std::vector<std::string>(s, s+12);
  for (typename std::map<std::string, M>::const_iterator it=m.begin();it!=m.end();++it) {
    if (std::find(sv.begin(), sv.end(), it->first)==sv.end())
      casadi_error("Error in 'stabilizedQpIn' arguments. You supplied key '"
        << it->first << "'. Allowed keys are: " << sv << ".");
  }
  return std::make_pair(m, sv);
}
} // namespace casadi
#endif //SCHEMES_HELPERS_HPP

