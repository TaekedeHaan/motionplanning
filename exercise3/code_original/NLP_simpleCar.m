% Example script for getting started with FORCES NLP solver.
%
%--------------------------------------------------------------------------
% NOTE: This example shows how to define a nonlinear programming problem,
% where all derivative information is automatically generated by
% using the AD tool CasADi.
% 
% You may want to directly pass C functions to FORCES, for example when you 
% are using other AD tools, or have custom C functions for derivate 
% evaluation etc. See the example file "NLPexample_ownFevals.m" for how to
% pass custom C functions to FORCES.
%--------------------------------------------------------------------------
%
% This example solves an optimization problem for a car with the simple
% continuous-time, nonlinear dynamics
%
%    dx/dt = v*cos(theta)
%    dy/dt = v*sin(theta)
%    dv/dt = F/m
%    dtheta/dt = v*s/L
%
% where x,y are the position, v the velocity in heading angle theta of the
% car. The inputs are F (accelerating force) and steering s.
%
% The car starts from standstill with a certain heading angle, and the
% optimization problem is to maximize progress in y direction while staying
% inside a non-convex feasible region.
%
% Quadratic costs for the acceleration force and steering are added to the
% objective to avoid excessive maneouvers.
%
% There are bounds on all variables.
%
% Variables are collected stage-wise into z = [F s x y v theta].
%
% See also FORCES_NLP
%
% (c) embotech GmbH, Zurich, Switzerland, 2013-16.

clear; clc; close all;
import casadi.*;

rad2deg = @(x) x/pi*180;
deg2rad = @(x) x/180*pi;

%% Problem dimensions
model.N = 50;            % horizon length
model.nvar = 6;          % number of variables
model.neq  = 4;          % number of equality constraints
model.nh = 2;            % number of inequality constraint functions

%% Objective function (Ex. 3.1)
% In this example, we want to maximize position in y direction,
% with some penalties on the inputs F and s:
model.objective = @(z) TODO

% You can use standard Matlab handles to define these functions, i.e. you
% could also have this in a separate file. We use anonymous handles here
% only for convenience.

%% Dynamics, i.e. equality constraints (Ex. 3.2) 
% We use an explicit RK4 integrator here to discretize continuous dynamics:
m=0.9; L=0.12; % physical constants of the model
integrator_stepsize = 0.1;
continuous_dynamics = @(x,u) [x(3)*cos(x(4));  % v*cos(theta)
                              TODO             % v*sin(theta)
                              TODO             % F/m
                              TODO ];          % v*s/L
model.eq = @(z) RK4( z(3:6), z(1:2), continuous_dynamics, integrator_stepsize);

% Indices on LHS of dynamical constraint - for efficiency reasons, make
% sure the matrix E has structure [0 I] where I is the identity matrix.
model.E = [zeros(4,2), eye(4)];

%% Inequality constraints (Ex. 3.3)
% upper/lower variable bounds lb <= z <= ub
%            inputs    |        states
%             F    s       x     y     v    theta
model.lb = [ TODO                                  ];
model.ub = [ TODO                                  ];

% General (differentiable) nonlinear inequalities hl <= h(z) <= hu
model.ineq = @(z) [ TODO
                    TODO ];
                
% Upper/lower bounds for inequalities
model.hl = [ TODO ]';
model.hu = [ TODO ]';

%% Initial and final conditions (Ex. 3.4)

% Initial condition on vehicle states
model.xinit = TODO
model.xinitidx = TODO % use this to specify on which variables initial conditions are imposed

% Final condition on vehicle velocity and heading angle
model.xfinal = TODO
model.xfinalidx = TODO % use this to specify on which variables final conditions are imposed


%% Define solver options
codeoptions = getOptions('FORCESNLPsolver');
% codeoptions.server = 'http://embotech-server2.ee.ethz.ch:8114/v1.5.beta'; % change this to your server or leave empty for using the standard embotech server
codeoptions.maxit = 200;    % Maximum number of iterations
codeoptions.printlevel = 2; % Use printlevel = 2 to print progress (but not for timings)
codeoptions.optlevel = 0; % 2: optimize for speed
codeoptions.cleanup = 0;

%% Generate forces solver
FORCES_NLP(model, codeoptions);

%% Call solver
% Set initial guess to start solver from:
x0i=model.lb+(model.ub-model.lb)/2;
x0=repmat(x0i',model.N,1);
problem.x0=x0; 

% Set initial and final conditions. This is usually changing from problem
% instance to problem instance:
problem.xinit = model.xinit;
problem.xfinal = model.xfinal;
problem.all_parameters = [5; 10];

% Time to solve the NLP!
[output,exitflag,info] = FORCESNLPsolver(problem);

% Make sure the solver has exited properly. 
assert(exitflag == 1,'Some problem in FORCES solver');
fprintf('\nFORCES took %d iterations and %f seconds to solve the problem.\n',info.it,info.solvetime);

%% Plot results
TEMP = zeros(model.nvar,model.N);
for i=1:model.N
    TEMP(:,i) = output.(['x',sprintf('%02d',i)]);
end
U = TEMP(1:2,:);
X = TEMP(3:6,:);

% plot trajectory
figure(1); clf;
plot(X(1,:),X(2,:),'b-'); hold on; 
rectangle('Position',[-sqrt(model.hl(1)) -sqrt(model.hl(1)) 2*sqrt(model.hl(1)) 2*sqrt(model.hl(1))],'Curvature',[1 1],'EdgeColor','r','LineStyle',':','LineWidth',2);
rectangle('Position',[-sqrt(model.hu(1)) -sqrt(model.hu(1)) 2*sqrt(model.hu(1)) 2*sqrt(model.hu(1))],'Curvature',[1 1],'EdgeColor','r','LineStyle',':','LineWidth',2);
rectangle('Position',[-2-sqrt(model.hl(2)) 2.5-sqrt(model.hl(2)) 2*sqrt(model.hl(2)) 2*sqrt(model.hl(2))],'Curvature',[1 1],'EdgeColor','r','LineStyle',':','LineWidth',2);
plot(model.xinit(1),model.xinit(2),'bx','LineWidth',3); 
title('position'); xlim([-3 0]); ylim([0 3]); xlabel('x position'); ylabel('y position');

% plot heading angle and velocity variables
figure(2); clf;
subplot(2,1,1); plot(X(3,:)); grid on; title('velocity'); hold on; 
plot([1 model.N], [model.ub(5) model.ub(5)]', 'r:');
plot([1 model.N], [model.lb(5) model.lb(5)]', 'r:');
subplot(2,1,2); plot(rad2deg(X(4,:))); grid on; title('heading angle'); ylim([0, 180]); hold on; 
plot([1 model.N], rad2deg([model.ub(6) model.ub(6)])', 'r:');
plot([1 model.N], rad2deg([model.lb(6) model.lb(6)])', 'r:');

% plot inputs
figure(3); clf;
subplot(2,1,1); stairs(U(1,:)); grid on; title('acceleration force'); hold on; 
plot([1 model.N], [model.ub(1) model.ub(1)]', 'r:');
plot([1 model.N], [model.lb(1) model.lb(1)]', 'r:');
subplot(2,1,2); stairs(U(2,:)); grid on; title('delta steering'); hold on; 
plot([1 model.N], [model.ub(2) model.ub(2)]', 'r:');
plot([1 model.N], [model.lb(2) model.lb(2)]', 'r:');
